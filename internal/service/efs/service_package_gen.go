// Code generated by internal/generate/servicepackages/main.go; DO NOT EDIT.

package efs

import (
	"context"

	aws_sdkv2 "github.com/aws/aws-sdk-go-v2/aws"
	efs_sdkv2 "github.com/aws/aws-sdk-go-v2/service/efs"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)

type servicePackage struct{}

func (p *servicePackage) FrameworkDataSources(ctx context.Context) []*types.ServicePackageFrameworkDataSource {
	return []*types.ServicePackageFrameworkDataSource{}
}

func (p *servicePackage) FrameworkResources(ctx context.Context) []*types.ServicePackageFrameworkResource {
	return []*types.ServicePackageFrameworkResource{}
}

func (p *servicePackage) SDKDataSources(ctx context.Context) []*types.ServicePackageSDKDataSource {
	return []*types.ServicePackageSDKDataSource{
		{
			Factory:  DataSourceAccessPoint,
			TypeName: "aws_efs_access_point",
		},
		{
			Factory:  DataSourceAccessPoints,
			TypeName: "aws_efs_access_points",
		},
		{
			Factory:  DataSourceFileSystem,
			TypeName: "aws_efs_file_system",
		},
		{
			Factory:  DataSourceMountTarget,
			TypeName: "aws_efs_mount_target",
		},
	}
}

func (p *servicePackage) SDKResources(ctx context.Context) []*types.ServicePackageSDKResource {
	return []*types.ServicePackageSDKResource{
		{
			Factory:  ResourceAccessPoint,
			TypeName: "aws_efs_access_point",
			Name:     "Access Point",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrID,
			},
		},
		{
			Factory:  ResourceBackupPolicy,
			TypeName: "aws_efs_backup_policy",
		},
		{
			Factory:  ResourceFileSystem,
			TypeName: "aws_efs_file_system",
			Name:     "File System",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrID,
			},
		},
		{
			Factory:  ResourceFileSystemPolicy,
			TypeName: "aws_efs_file_system_policy",
		},
		{
			Factory:  ResourceMountTarget,
			TypeName: "aws_efs_mount_target",
			Name:     "Mount Target",
		},
		{
			Factory:  ResourceReplicationConfiguration,
			TypeName: "aws_efs_replication_configuration",
			Name:     "Replication Configuration",
		},
	}
}

func (p *servicePackage) ServicePackageName() string {
	return names.EFS
}

// NewClient returns a new AWS SDK for Go v2 client for this service package's AWS API.
func (p *servicePackage) NewClient(ctx context.Context, config map[string]any) (*efs_sdkv2.Client, error) {
	cfg := *(config["aws_sdkv2_config"].(*aws_sdkv2.Config))

	return efs_sdkv2.NewFromConfig(cfg, func(o *efs_sdkv2.Options) {
		if endpoint := config[names.AttrEndpoint].(string); endpoint != "" {
			tflog.Debug(ctx, "setting endpoint", map[string]any{
				"tf_aws.endpoint": endpoint,
			})
			o.BaseEndpoint = aws_sdkv2.String(endpoint)

			if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
				tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
				o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
			}
		}
	}), nil
}

func ServicePackage(ctx context.Context) conns.ServicePackage {
	return &servicePackage{}
}
